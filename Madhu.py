# -*- coding: utf-8 -*-
"""Data_Science_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1swRIiuR4rMJjPuuxFkU1g9NW1GPdx2z1

# BELOW WORK DONE BY MOHAMMADNADIMKHAN
"""

import pandas as pd

confirmed_cases_global_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
confirmed_deaths_global_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"

confirmed_cases_global_df = pd.read_csv(confirmed_cases_global_url)
confirmed_deaths_global_df = pd.read_csv(confirmed_deaths_global_url)

global_confirmed_cases = confirmed_cases_global_df.groupby('Country/Region').sum().drop(['Lat', 'Long'], axis=1)
global_deaths = confirmed_deaths_global_df.groupby('Country/Region').sum().drop(['Lat', 'Long'], axis=1)
global_data_df = pd.DataFrame({'Confirmed': global_confirmed_cases.sum(), 'Deaths': global_deaths.sum()})

global_confirmed_cases

global_deaths

""" ##BELOW WORK DONE BY MUDHIMUKKU MADHUSUDHANA"""

global_data_df.index = pd.to_datetime(global_data_df.index)
global_data_df.index = global_data_df.index.strftime("%m/%d/%y")

global_data_df

# data_dict = {}
# dates = confirmed_cases_global_df.columns[4:]

# for date in dates:
#     global_cases = confirmed_cases_global_df.groupby('Country/Region')[date].sum().sum()
#     global_deaths = confirmed_deaths_global_df.groupby('Country/Region')[date].sum().sum()
#     data_dict[date] = pd.DataFrame({'Confirmed Cases': global_cases, 'Deaths': global_deaths}, index=[0])


# def validate_date_format(user_date):
#     try:
#         datetime.strptime(user_date, "%m/%d/%y")
#         return True
#     except ValueError:
#         return False

# input_date = input("Enter date in this format: m/d/yy (For Example:- 1/21/20)\n")
# if(validate_date_format(input_date)):
#   if(input_date in data_dict):
#     print(data_dict[input_date])
#   else:
#     print("Dataset does not have this date")
# else:
#   print("Please Enter Date in Valid Format.")

saskatchewan_cases = confirmed_cases_global_df[confirmed_cases_global_df['Province/State'] == 'Saskatchewan']
saskatchewan_deaths = confirmed_deaths_global_df[confirmed_deaths_global_df['Province/State'] == 'Saskatchewan']

saskatchewan_cases

saskatchewan_deaths

"""##BELOW WORK DONE BY MOHAMMADSUFIYANKHAN"""

import requests
api_key = 'TC54JI2GWZOZ8I0J'
symbol_aapl = 'AAPL'  # Apple Inc.


# Function to get stock data
def get_stock_data(symbol):
    # url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&outputsize=full&apikey={api_key}'
    url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=AAPL&outputsize=full&apikey=TC54JI2GWZOZ8I0J'

    response = requests.get(url)
    data = response.json()
    return data['Time Series (Daily)']


# Get stock data for AAPL and Z
aapl_data = get_stock_data(symbol_aapl)

# Convert stock data to dataframes
aapl_df = pd.DataFrame(aapl_data).T[['2. high', '3. low']].rename(columns={'2. high': 'AAPL_High', '3. low': 'AAPL_Low'})
aapl_df.index = pd.to_datetime(aapl_df.index)
aapl_df.index = aapl_df.index.strftime("%m/%d/%y")
print(aapl_df.head())

# Concatenate stock data to global_data_df

global_data_df = pd.concat([global_data_df, aapl_df], axis=1, sort=True)

global_data_df = global_data_df.sort_index()
global_data_df = global_data_df[global_data_df['AAPL_High'].notna()]
global_data_df = global_data_df[global_data_df['Confirmed'].notna()]

global_data_df.index = pd.to_datetime(global_data_df.index)
global_data_df.index = global_data_df.index.strftime("%Y-%m-%d")

global_data_df = global_data_df.sort_index()


global_data_df

from matplotlib import pyplot as plt
global_data_df['Confirmed'].plot(kind='hist', bins=20, title='Confirmed')
plt.gca().spines[['top', 'right',]].set_visible(False)



import matplotlib.pyplot as plt

# Your code for data manipulation and plotting goes here

chosen_date = '9/30/22'  # Example date

# Group data by country and select the chosen date
date_data = confirmed_cases_global_df.groupby('Country/Region')[chosen_date].sum()

# Sort data by the chosen date in ascending order and get top 20 countries
top_20_countries = date_data.nlargest(20)

# Create a horizontal bar plot
plt.figure(figsize=(10, 8))
top_20_countries.sort_values().plot(kind='barh', color='skyblue')
plt.xlabel('Confirmed Cases')
plt.ylabel('Country')
plt.title(f'Top 20 Countries by Confirmed COVID-19 Cases on {chosen_date}')
plt.grid(axis='x')
plt.tight_layout()

# Show the plot
plt.show()

